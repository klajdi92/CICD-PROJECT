pipeline {
    agent any
    environment {
        VERSION = "${env.BUILD_ID}"
    }


    stages {

        stage('Sonar quality check') {
            agent {
                docker {
                    image  'maven'
                }
            }
            steps {
                script {

                    withSonarQubeEnv(credentialsId: 'sonar-tokenss') {

                        sh 'mvn clean package sonar:sonar'

                 }
                }
            }

        }

        stage('Sonar quality gate status') {
            steps {
                script {

                   waitForQualityGate abortPipeline: false, credentialsId: 'sonar-tokenss'
                }
            }

        }

        stage('docker build & docker push to Nexus repo') {
            steps {
                script {

                    withCredentials([string(credentialsId: 'nexus_password', variable: 'nexus-creds')]) {

                    sh'''
                      docker build -t 34.133.53.145:8083/springapp:${VERSION} .

                      docker login -u admin -p $nexus-creds 34.133.53.145:8083
                      
                      docker push 34.133.53.145:8083/springapp:${VERSION}

                      docker rmi 34.133.53.145:8083/springapp:${VERSION}
                    '''
                    }

                }
            }

        }

        
    }

}
