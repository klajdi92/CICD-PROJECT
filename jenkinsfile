pipeline {
    agent any

    parameters {

        choice(name: 'action', choices: 'create\ndestroy\ndestroycluster', description: 'create or update or destroy a cluster')
        string(name: 'cluster', defaultValue: 'cluster-klajdi-production', description: 'GKE cluster name')
        string(name: 'region', defaultValue: 'us-central1', description: 'GKE cluster region')
        string(name: 'projectid', defaultValue: 'cicd-project-375614', description: 'GKE project id')
    }
    environment {
        VERSION = "${env.BUILD_ID}"
    }


    stages {

        stage('Sonar quality check') {
            agent {
                docker {
                    image  'maven'
                }
            }
            steps {
                script {

                    withSonarQubeEnv(credentialsId: 'sonar-tokenss') {

                        sh 'mvn clean package sonar:sonar'

                 }
                }
            }

        }

        stage('Sonar quality gate status') {
            steps {
                script {

                   waitForQualityGate abortPipeline: false, credentialsId: 'sonar-tokenss'
                }
            }

        }

        stage('docker build & docker push to Nexus repo') {
            steps {
                script {

                    withCredentials([string(credentialsId: 'nexus_password', variable: 'nexus_creds')]) {

                    sh'''
                      docker build -t 34.133.53.145:8083/springapp:${VERSION} .

                      docker login -u admin -p $nexus_creds 34.133.53.145:8083
                      
                      docker push 34.133.53.145:8083/springapp:${VERSION}

                      docker rmi 34.133.53.145:8083/springapp:${VERSION}
                    '''
                    }

                }
            }

        }

        stage('Identify misconfigs using datree in helm charts'){

            steps{

                script{
                    dir('kubernetes/myapp/') {
                        withEnv(['DATREE_TOKEN=9928350c-015e-445d-9fcc-cfc8bcf07803']) {
                          sh 'helm datree test .'
                          }
                  }
                }
            }

        }

        stage('Pushing helm charts to nexus repo'){

            steps{
                script{
                    withCredentials([string(credentialsId: 'nexus_password', variable: 'nexus_creds')]) {
                       dir('kubernetes/') {
                         sh'''
                         helmversion=$(helm show chart myapp | grep version | cut -d: -f 2 | tr -d ' ')
                         tar -czvf myapp-${helmversion}.tgz myapp/
                          curl -u admin:$nexus_creds http://34.133.53.145:8081/repository/helm-repo/ --upload-file myapp-${helmversion}.tgz -v
                       
                         '''
                       }
                    }

                }
            }
        }
        stage('GKE connect'){
            steps{

                withCredentials([file(credentialsId: 'gcloud-creds', variable: 'GCLOUD_CREDS')]) {

                sh'''
                gcloud auth activate-service-account --key-file=$GCLOUD_CREDS
                gcloud container clusters get-credentials ${params.cluster} --region ${params.region} --project ${params.projectid}

                '''
                }
            }
        }

    //     stage('GKE deployments'){
    //         when { expression { params.action == 'create'}}
    //         steps{

    //             script{
    //                 def apply = false
    //                 try{
    //                     input message: 'press apply to initiate the deployments', ok: 'Ready to apply the config'
    //                     apply = true
    //                 }
    //                 catch(err){
    //                     apply = false
    //                     CurrentBuild.result= 'UNSTABLE'
    //                 }
    //                 if(apply){
    //                     sh '''
    //                     kubectl apply -f .
    //                     ''';
    //                 }
    //             }
    //         }
    //     }

     }

    post {
		  always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "in.futurekb@gmail.com";  
		}
	}

}
